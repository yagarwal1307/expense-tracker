/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ExpenseTracker {
  export type ExpenseStruct = {
    id: BigNumberish;
    description: string;
    amount: BigNumberish;
    tags: string[];
    timestamp: BigNumberish;
    owner: AddressLike;
  };

  export type ExpenseStructOutput = [
    id: bigint,
    description: string,
    amount: bigint,
    tags: string[],
    timestamp: bigint,
    owner: string
  ] & {
    id: bigint;
    description: string;
    amount: bigint;
    tags: string[];
    timestamp: bigint;
    owner: string;
  };
}

export interface ExpenseTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addExpense"
      | "createTag"
      | "getExpensesByTag"
      | "getUserExpenses"
      | "getUserTags"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ExpenseAdded" | "TagCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addExpense",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "createTag", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getExpensesByTag",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExpenses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTags",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addExpense", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpensesByTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserExpenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTags",
    data: BytesLike
  ): Result;
}

export namespace ExpenseAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    description: string,
    amount: BigNumberish,
    tags: string[]
  ];
  export type OutputTuple = [
    id: bigint,
    description: string,
    amount: bigint,
    tags: string[]
  ];
  export interface OutputObject {
    id: bigint;
    description: string;
    amount: bigint;
    tags: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TagCreatedEvent {
  export type InputTuple = [name: string];
  export type OutputTuple = [name: string];
  export interface OutputObject {
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExpenseTracker extends BaseContract {
  connect(runner?: ContractRunner | null): ExpenseTracker;
  waitForDeployment(): Promise<this>;

  interface: ExpenseTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addExpense: TypedContractMethod<
    [_description: string, _amount: BigNumberish, _tags: string[]],
    [void],
    "nonpayable"
  >;

  createTag: TypedContractMethod<[_name: string], [void], "nonpayable">;

  getExpensesByTag: TypedContractMethod<
    [_tag: string],
    [ExpenseTracker.ExpenseStructOutput[]],
    "view"
  >;

  getUserExpenses: TypedContractMethod<
    [],
    [ExpenseTracker.ExpenseStructOutput[]],
    "view"
  >;

  getUserTags: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addExpense"
  ): TypedContractMethod<
    [_description: string, _amount: BigNumberish, _tags: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTag"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getExpensesByTag"
  ): TypedContractMethod<
    [_tag: string],
    [ExpenseTracker.ExpenseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserExpenses"
  ): TypedContractMethod<[], [ExpenseTracker.ExpenseStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUserTags"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "ExpenseAdded"
  ): TypedContractEvent<
    ExpenseAddedEvent.InputTuple,
    ExpenseAddedEvent.OutputTuple,
    ExpenseAddedEvent.OutputObject
  >;
  getEvent(
    key: "TagCreated"
  ): TypedContractEvent<
    TagCreatedEvent.InputTuple,
    TagCreatedEvent.OutputTuple,
    TagCreatedEvent.OutputObject
  >;

  filters: {
    "ExpenseAdded(uint256,string,uint256,string[])": TypedContractEvent<
      ExpenseAddedEvent.InputTuple,
      ExpenseAddedEvent.OutputTuple,
      ExpenseAddedEvent.OutputObject
    >;
    ExpenseAdded: TypedContractEvent<
      ExpenseAddedEvent.InputTuple,
      ExpenseAddedEvent.OutputTuple,
      ExpenseAddedEvent.OutputObject
    >;

    "TagCreated(string)": TypedContractEvent<
      TagCreatedEvent.InputTuple,
      TagCreatedEvent.OutputTuple,
      TagCreatedEvent.OutputObject
    >;
    TagCreated: TypedContractEvent<
      TagCreatedEvent.InputTuple,
      TagCreatedEvent.OutputTuple,
      TagCreatedEvent.OutputObject
    >;
  };
}
